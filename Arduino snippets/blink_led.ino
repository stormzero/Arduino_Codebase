//************************************************************************************
// Saved by Simulator for Arduino V0.98.A.6
//**  
//**  File name:     C:\Users\Miguel\Documents\blink_led.c
//**  Title:         
//**  Description:   
//**  
//**  Generated by:  Flowcode v5.3.0.0
//**  Date:          Monday, December 03, 2012 22:07:23
//**  Licence:       Student
//**  Registered to: Luis Rodrigues
//**  Licence key:   4T9CCF
//**  
//**  
//**     NÃO PARA USO COMERCIAL 
//**  
//**  http://www.matrixmultimedia.com
//**  
//************************************************************************************

// S1imulate(Uno)
//#define __AVR_ATmega644P__
//#include "boards.h"

#define MX_AVR

#define MX_USES_UINT8 1
#define MX_USES_SINT16 0
#define MX_USES_CHAR 0
#define MX_USES_FLOAT 0
#define MX_USES_SINT32 0
#define MX_USES_BOOL 1
#define MX_USES_UINT16 0
#define MX_USES_UINT32 0
//Definições para o microcontrolador
#define FC_CAL_AVR
#define MX_ADC
#define MX_ADC_TYPE_3
#define MX_ADC_BITS_10
#define MX_EE
#define MX_EE_SIZE 1024
#define MX_SPI_1
#define MX_SPI_1_MISO_PORT PORTB
#define MX_SPI_1_MISO_TRIS DDRB
#define MX_SPI_1_MISO_PIN 3
#define MX_SPI_1_MOSI_PORT PORTB
#define MX_SPI_1_MOSI_TRIS DDRB
#define MX_SPI_1_MOSI_PIN 2
#define MX_SPI_1_CLK_PORT PORTB
#define MX_SPI_1_CLK_TRIS DDRB
#define MX_SPI_1_CLK_PIN 1
#define MX_SPI_1_SS_PORT PORTB
#define MX_SPI_1_SS_TRIS DDRB
#define MX_SPI_1_SS_PIN 0
#define MX_UART_1
#define MX_UART_1_TX_PORT PORTD
#define MX_UART_1_TX_TRIS DDRD
#define MX_UART_1_TX_PIN 3
#define MX_UART_1_RX_PORT PORTD
#define MX_UART_1_RX_TRIS DDRD
#define MX_UART_1_RX_PIN 2
#define MX_UART_ID
#define MX_UART_UCSRC
#define MX_MI2C
#define MX_I2C_1
#define MX_I2C_1_SDA_PORT PORTD
#define MX_I2C_1_SDA_TRIS DDRD
#define MX_I2C_1_SDA_PIN 1
#define MX_I2C_1_SCL_PORT PORTD
#define MX_I2C_1_SCL_TRIS DDRD
#define MX_I2C_1_SCL_PIN 0
#define MX_PWM
#define MX_PWMTYPE 1
#define MX_PWM_CNT 9
#define MX_PWM_TMR0_CNT 2
#define MX_PWM_TMR1_CNT 3
#define MX_PWM_TMR2_CNT 0
#define MX_PWM_TMR3_CNT 1
#define MX_PWM_TMR4_CNT 3
#define MX_PWM_PSCA1
#define MX_PWM_PSCA8
#define MX_PWM_PSCA64
#define MX_PWM_PSCA256
#define MX_PWM_PSCA1024
#define MX_PWM_1_PORT PORTB
#define MX_PWM_1_TRIS DDRB
#define MX_PWM_1_PIN 7
#define MX_PWM_2_PORT PORTD
#define MX_PWM_2_TRIS DDRD
#define MX_PWM_2_PIN 0
#define MX_PWM_3_PORT PORTB
#define MX_PWM_3_TRIS DDRB
#define MX_PWM_3_PIN 5
#define MX_PWM_4_PORT PORTB
#define MX_PWM_4_TRIS DDRB
#define MX_PWM_4_PIN 6

//Funções
#define F_CPU 16000000UL
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <avr\io.h>
#include <avr\interrupt.h>
#include <avr\eeprom.h>
#include <avr\wdt.h>

//Configuração de dados

//Funções internas
//#include "C:\Program Files\Flowcode(AVR)\v5\FCD\internals.c"

//Declarações da função Macro


//Declarações da variável
#define FCV_FALSE (0)
#define FCV_TRUE (1)




//LED(0): //Defines:

/**** Macro Substitutions ****
a = Unique Reference
b = LED Port Letter
c = LED Pin Number
d = LED Active Polarity
******************************/

#define LED_1__LED_PORT  portb
#define LED_1__LED_TRIS  trisb
#define LED_1__LED_PIN  0
#define LED_1__LED_POLE  1




//LED(0): //Declarações da função Macro

static void FCD_LED0_LEDOn();
static void FCD_LED0_LEDOff();



//LED(0): //Implementações Macro


void FCD_LED0_LEDOn()
{
 
  #if( LED_1__LED_POLE == 1)         //Active high polarity
   FC_CAL_Bit_High_DDR( LED_1__LED_PORT , LED_1__LED_TRIS , LED_1__LED_PIN );
  #else             //Active low polarity
   FC_CAL_Bit_Low_DDR( LED_1__LED_PORT , LED_1__LED_TRIS , LED_1__LED_PIN );
  #endif

}

void FCD_LED0_LEDOff()
{
 
  #if( LED_1__LED_POLE == 1)         //Active high polarity
   FC_CAL_Bit_Low_DDR( LED_1__LED_PORT , LED_1__LED_TRIS , LED_1__LED_PIN );
  #else             //Active low polarity
   FC_CAL_Bit_High_DDR( LED_1__LED_PORT , LED_1__LED_TRIS , LED_1__LED_PIN );
  #endif

}

//#include "C:\Program Files\Flowcode(AVR)\v5\CAL\includes.c"

//Implementações Macro
#include <avr/io.h>


void setup()
{
}

void loop()
{
 //Inicialização
 MCUCR=0x00;
 MCUSR=0x00;
 wdt_disable();


 //Código de inicialização da interrupção
 
 //Ciclo
 //Ciclo: Enquanto1
 while (1)
 {

  //Chamar Macro de Componente
  //Chamar Macro de Componente: LEDLigado()
  FCD_LED0_LEDOn();

  //Atraso
  //Atraso: 1 s
  delay_s(1);

  //Chamar Macro de Componente
  //Chamar Macro de Componente: LEDDesligado()
  FCD_LED0_LEDOff();

  //Atraso
  //Atraso: 1 s
  delay_s(1);


 }

 mainendloop: goto mainendloop;
}




